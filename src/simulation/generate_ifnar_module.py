# Read in csv file where each row contains parts of an ODE equation
# and generate a module that can be used in a model

import sys
import numpy as np
import pandas as pd

class ode_module:
    def __init__(self, species):
        self.species = species

    def add_equation(self, equation):
        self.equation = equation

    def generate_module(self):
        return self.equation


def main():
    equations_file = sys.argv[1]
    equations_df = pd.read_csv(equations_file)
    # print(equations_df)
    # concatenate columns synthesis, degradation, activation, and deactivation into one string for each row
    equations_df["equation"] = equations_df["synthesis"] + equations_df["degradation"] + equations_df["activation"] + equations_df["deactivation"]
    ode_equations = equations_df["equation"].tolist()
    species = equations_df["species"].tolist()
    # equations_df["pars"] has comma separated strings of parameter names, make a list of all of them
    # print(equations_df["pars"])
    equations_df["pars"] = equations_df["pars"].str.split(",")
    print(equations_df["pars"])
    pars = [p.strip() for p in equations_df["pars"].explode() if pd.isnull(p) == False]
    pars = np.unique(pars)

    equations_df["inputs"] = equations_df["inputs"].str.split(",")
    print(equations_df["inputs"])
    inputs = [i.strip() for i in equations_df["inputs"].explode() if pd.isnull(i) == False]
    inputs = np.unique(inputs)

    
    print("species: " + str(species))
    print("pars: " + str(pars))
    print("inputs: " + str(inputs))
    print("equations: " + str(ode_equations))

    module_file = sys.argv[2]
    # Open file for writing
    with open(module_file, 'w') as f:
        # Write header
        f.write("# This file was generated by generate_ifnar_module.py\n")
        f.write("# It was generated from " + equations_file + "\n")
        f.write("# \n")
        f.write("def change_equations(states, pars, inputs):\n")
        f.write("\n\t# Unpack states\n")
        for i in range(len(species)):
            f.write("\t%s = states[%d]\n" % (species[i], i))

        f.write("\n\t# Unpack pars\n")
        for par in pars:
            f.write("\t%s = pars['%s']\n" % (par, par))
            
        f.write("\n\t# Unpack inputs\n")
        for inp in inputs:
            f.write("\t%s = inputs['%s']\n" % (inp, inp))

        f.write("\n\t# Calculate derivatives\n")
        for i in range(len(species)):
            s = ode_module(species[i])
            s.add_equation(ode_equations[i])
            eq = s.generate_module()
            f.write("\td%s = %s\n" % (species[i], eq))
        f.write("\treturn [")
        for i in range(len(species)-1):
            f.write("d%s, " % species[i])
        f.write("d%s]\n" % species[len(species)-1])

if __name__ == "__main__":
    main()

            
            