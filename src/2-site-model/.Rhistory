sum(very_different_KI)
sum(very_similar_KI)
dne_rpkm_corr
dne_peaks
rownames(dne_peaks)
old_rows = bind_cols(rownames(peaks),1:nrow(peaks))
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))
old_rows
new_rows = bind_cols(names = rownames(dne_peaks), new = 1:nrow(dne_peaks))
new_rows
new_rows = bind_cols(names = rownames(dne_peaks), new = 1:nrow(dne_peaks)) %>%
right_join(old_rows, by=names)
new_rows = bind_cols(names = rownames(dne_peaks), new = 1:nrow(dne_peaks)) %>%
right_join(old_rows, by="names")
new_rows
new_rows = bind_cols(names = rownames(dne_peaks), new = 1:nrow(dne_peaks))
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names")
old_rows
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(very_different_KI = very_different_KI, very_similar_KI = very_similar_KI)
old_rows
old_rows %>% filter(very_similar_KI==T)
very_different_KI = results$table$PValue < 0.1 & dne_rows
very_similar_KI = results$table$PValue > 0.90 & dne_rows
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(very_different_KI = very_different_KI, very_similar_KI = very_similar_KI)
sum(very_different_KI)
sum(very_similar_KI)
dne_rpkm_corr
df_fc = dne_rpkm_corr %>%
rownames_to_column(new)
df_fc = dne_rpkm_corr %>%
rownames_to_column("new")
df_fc
df_fc = dne_rpkm_corr %>%
rownames_to_column("new") %>%
left_join(old_rows, by = "new")
df_fc = dne_rpkm_corr %>%
bind_cols(1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new")
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new")
df_fc
colnames(df_fc)
dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr))
(dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)))[,:10:]
(dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)))[,10:]
(dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)))[,10:23]
(dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)))[,19:31]
(dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)))[,19:30]
df_fc[,19:36]
df_fc[,19:34]
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(very_different_KI,very_similar_KI)
df_fc[,19:34]
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(very_different_KI),desc(very_similar_KI))
df_fc[,19:34]
df_fc[,19:34] %>% tail()
gaps_row = c(very_different_KI, very_different_KI+very_similar_KI)
k_names = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(sample)
k_names
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(very_different_KI),desc(very_similar_KI)) %>%
select(all_of(k_names))
df_fc
source("~/R_analysis/de_novo_enhancers_util.R")
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference", gaps_row)
source("~/R_analysis/de_novo_enhancers_util.R")
source("~/R_analysis/de_novo_enhancers_util.R")
source("~/R_analysis/de_novo_enhancers_util.R")
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference", gaps_row)
df_fc
l2rpkm
plot_heatmap(df_fc, "test", results_directory)
source("~/R_analysis/de_novo_enhancers_util.R")
source("~/R_analysis/de_novo_enhancers_util.R")
plot_heatmap(df_fc, "test", results_directory, gaps_row)
gaps_row
gaps_row = c(sum(very_different_KI), sum(very_different_KI)+sum(very_similar_KI))
gaps_row
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference", gaps_row)
# Another approach
different_KI = results$table$logFC < quantile(results$table$logFC,0.25) & dne_rows
similar_KI = results$table$PValue > quantile(results$table$logFC,0.75)& dne_rows
sum(different_KI)
sum(similar_KI)
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(different_KI = different_KI, similar_KI = similar_KI)
dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(different_KI),desc(similar_KI))
df_fc
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(different_KI),desc(similar_KI)) %>%
select(all_of(k_names))
gaps_row = c(sum(different_KI), sum(different_KI)+sum(similar_KI))
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference_by_glm_FC", gaps_row)
gaps-row
gaps_row
sum(similar_KI)
similar_KI = results$table$logFC > quantile(results$table$logFC,0.75) & dne_rows
sum(similar_KI)
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(different_KI = different_KI, similar_KI = similar_KI)
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(different_KI),desc(similar_KI)) %>%
select(all_of(k_names))
gaps_row = c(sum(different_KI), sum(different_KI)+sum(similar_KI))
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference_by_glm_FC", gaps_row)
quantile(abs(results$table$logFC))
similar_KI = abs(results$table$logFC) < quantile(abs(results$table$logFC),0.25) &
dne_rows & !different_KI
sum(similar_KI)
quantile(abs(results$table$logFC),0.25)
sum(abs(results$table$logFC) < quantile(abs(results$table$logFC),0.25) &
dne_rows)
similar_KI = abs(results$table$logFC) < quantile(abs(results$table$logFC),0.5) &
dne_rows & !different_KI
sum(similar_KI)
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(different_KI = different_KI, similar_KI = similar_KI)
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(different_KI),desc(similar_KI)) %>%
select(all_of(k_names))
gaps_row = c(sum(different_KI), sum(different_KI)+sum(similar_KI))
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference_by_glm_FC", gaps_row)
similar_KI = results$table$PValue < 0.1 &
dne_rows & !different_KI
sum(similar_KI)
similar_KI = results$table$PValue < 0.25 &
dne_rows & !different_KI
sum(similar_KI)
similar_KI = results$table$PValue > 0.9 &
dne_rows & !different_KI
sum(similar_KI)
quantile(results$table$PValue,0.75)
similar_KI = results$table$PValue > quantile(results$table$PValue,0.75) &
dne_rows & !different_KI
sum(similar_KI)
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(different_KI = different_KI, similar_KI = similar_KI)
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(different_KI),desc(similar_KI)) %>%
select(all_of(k_names))
gaps_row = c(sum(different_KI), sum(different_KI)+sum(similar_KI))
plot_heatmap_gaps(df_fc, results_directory, "split_by_KI_difference_by_glm_FC", gaps_row)
quantile(results$table$logFC,0.25)
quantile(results$table$PValue,0.75)
sum(results$table$PValue > quantile(results$table$PValue,0.75) &
dne_rows)
sum(different_KI)
sum(similar_KI)
save(dne_peaks, dne_rpkm, dne_rpkm_corr, dne_glm_results, file = str_c(directory, "dne_peaks_2rep.R"))
source("~/R_analysis/de_novo_enhancers_util.R")
### motifs
# Split by overlapping motifs
isre_sites = read_tsv(str_glue("{directory}all_ISRE_sites.bed"))
isre_sites
?read_tsv
source("~/R_analysis/de_novo_enhancers_util.R")
source("~/R_analysis/de_novo_enhancers_util.R")
### motifs
# Split by overlapping motifs
isre_sites = read_tsv(str_glue("{directory}all_ISRE_sites.bed"),
col_names = c("chr", "start", "end", "x", "y", "z"))
isre_sites
nfkb_sites = read_tsv(str_glue("{directory}all_NFKB_sites.bed"),
col_names = c("chr", "start", "end", "x", "y", "z"))
nfkb_sites
isre = bed_to_granges(isre_sites)
nfkb = bed_to_granges(nfkb_sites)
isre_overlaps = findOverlaps(dne_peaks@rowRanges, isre, select = "first")
isre_overlaps
head(nfkb_overlaps)
length(isre_overlaps)
nfkb_overlaps = findOverlaps(dne_peaks@rowRanges, nfkb, select = "first")
head(!is.na(isre_overlaps))
df_motif = dne_rpkm_corr %>%
bind_cols(nfkb =!is.na(nfkb_overlaps),
isre=!is.na(isre_overlaps))
df_motif
df_motif = dne_rpkm_corr %>%
select(all_of(k_names)) %>%
bind_cols(nfkb =!is.na(nfkb_overlaps),
isre=!is.na(isre_overlaps))
df_motif
df_motif = dne_rpkm_corr %>%
select(all_of(k_names)) %>%
bind_cols(nfkb =!is.na(nfkb_overlaps),
isre=!is.na(isre_overlaps)) %>%
arrange(desc(nfkb), desc(isre))
df_motif
sum(df_motif$nfkb & df_motif$isre)
gaps_row = c(sum(df_motif$nfkb & df_motif$isre), sum(df_motif$nfkb))
gaps_row
?or
sum(df_motif$nfkb | df_motif$isre)
gaps_row = c(sum(df_motif$nfkb & df_motif$isre), sum(df_motif$nfkb),
sum(df_motif$nfkb | df_motif$isre))
plot_heatmap_gaps(select(df_motif, all_of(k_names)),
results_directory, "motif_both_nfkb_isre_neither", gaps_row)
gaps_row
292-149
506-292
nrow(df_motif)-506
df_motif[149:292,]
df_motif[293:506,]
library(stringr)
# set up ----
# Desktop paths
directory="~/R_analysis/RelA_TAD/"
function_directory = "~/R_analysis/"
results_directory = str_c(directory, "4_call_DNE/", Sys.Date(),"/")
qc_dir = str_c(directory, "0_qc/", Sys.Date(),"/")
dir.create(qc_dir, recursive = T, showWarnings = F)
dir.create(results_directory, recursive = T, showWarnings = F)
source(str_c(function_directory, "de_novo_enhancers_util.R"))
pal = rev(viridis::inferno(8))[2:7]
palette2 = c(pal, pal, pal,"#ABABAB")
# Specific
palette = c("#7CCAD5", "#3CAAB9", "#A0A6BE", "#6D779C", "#C481A7", "#994876")
atac_palette =  c("#7CCAD5", "#3CAAB9", "#5AE8ED", "#A0A6BE", "#6D779C", "#C481A7", "#DB86B6","#994876")
load(str_c(directory, "metadata.R"))
load(str_c(directory, "filtered_peaks.R"))
# Reference samples
sample_names = metadata$sample
wt_chip = metadata$analysis=="chip-seq"&metadata$genotype=="WT"
wt_chip_stim = metadata$analysis=="chip-seq"&metadata$genotype=="WT"&metadata$time==8
ch = metadata$analysis=="chip-seq"
load(str_c(directory, "dne_peaks_2rep.R"))
load(str_c(directory, "all_chip_peaks.R"))
# split by FC WT to KI
time = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(time)
# Correct for batch effects without outlier sample
metadata_corrected = metadata %>%
filter(sample != "chip-seq_KI_0h_rep1")
batch = metadata_corrected$rep
time = metadata_corrected$time
mth = metadata_corrected$analysis
gen = metadata_corrected$genotype
# split by FC WT to KI
time = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(time)
time=factor(time, levels=unique(time))
gen = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(genotype)
k = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
mutate(keep = 1) %>%
right_join(metadata, by="sample") %>%
pull(keep)
cols = !is.na(k)
k_names = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(sample)
dge = asDGEList(peaks[,cols])
colnames(dge) = colnames(peaks[,cols])
rownames(dge) = rownames(peaks[,cols])
dge$genes$length=good_peaks@rowRanges@ranges@width
dge$samples$lib.size = metadata$library_size[cols]
dge = calcNormFactors(peaks[,cols])
design = model.matrix(~gen + time)
disp = estimateDisp(dge, design)
fit = glmQLFit(disp, design, robust=TRUE)
results = glmQLFTest(fit, coef="genKI")
very_different_KI = results$table$PValue < 0.1 & dne_rows
dne = define_dne(peaks[,1:4], design, metadata$library_size[1:4], cutoff_p_val=0.05,
cutoff_FC=1.5, min_LPS_quantile=0.5, directory=results_directory)
t=metadata %>% filter(genotype=="WT"&analysis=="chip-seq") %>% pull(time)
design = model.matrix(~factor(t))
colnames(design) = c("intercept", "stimulus")
dne = define_dne(peaks[,1:4], design, metadata$library_size[1:4], cutoff_p_val=0.05,
cutoff_FC=1.5, min_LPS_quantile=0.5, directory=results_directory)
dne_rows = dne[[1]]
time = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(time)
time=factor(time, levels=unique(time))
gen = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(genotype)
k = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
mutate(keep = 1) %>%
right_join(metadata, by="sample") %>%
pull(keep)
cols = !is.na(k)
k_names = metadata_corrected %>%
filter(analysis=="chip-seq") %>%
pull(sample)
dge = asDGEList(peaks[,cols])
colnames(dge) = colnames(peaks[,cols])
rownames(dge) = rownames(peaks[,cols])
dge$genes$length=good_peaks@rowRanges@ranges@width
dge$samples$lib.size = metadata$library_size[cols]
dge = calcNormFactors(peaks[,cols])
design = model.matrix(~gen + time)
disp = estimateDisp(dge, design)
fit = glmQLFit(disp, design, robust=TRUE)
results = glmQLFTest(fit, coef="genKI")
save(dne_rows, dne_peaks, dne_rpkm, dne_rpkm_corr, dne_glm_results, file = str_c(directory, "dne_peaks_2rep.R"))
very_different_KI = results$table$PValue < 0.1 & dne_rows
very_similar_KI = results$table$PValue > 0.90 & dne_rows
new_rows = bind_cols(names = rownames(dne_peaks), new = 1:nrow(dne_peaks))
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(very_different_KI = very_different_KI, very_similar_KI = very_similar_KI)
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(very_different_KI),desc(very_similar_KI)) %>%
select(all_of(k_names))
gaps_row = c(sum(very_different_KI), sum(very_different_KI)+sum(very_similar_KI))
df_fc
different_KI = results$table$logFC < quantile(results$table$logFC,0.25) & dne_rows
similar_KI = results$table$PValue > quantile(results$table$PValue,0.75) &
dne_rows & !different_KI
old_rows = bind_cols(names = rownames(peaks), old = 1:nrow(peaks))%>%
left_join(new_rows, by="names") %>%
bind_cols(different_KI = different_KI, similar_KI = similar_KI)
df_fc = dne_rpkm_corr %>%
bind_cols("new"=1:nrow(dne_rpkm_corr)) %>%
left_join(old_rows, by = "new") %>%
arrange(desc(different_KI),desc(similar_KI)) %>%
select(all_of(k_names))
gaps_row = c(sum(different_KI), sum(different_KI)+sum(similar_KI))
peaks@rowRanges[different_KI,]
sum(different_KI)
sum(similar_KI)
source("~/R_analysis/de_novo_enhancers_util.R")
# Save bed from groups
defect_peaks = granges_to_bed(peaks@rowRanges[different_KI,])
defect_peaks
write.table(defect_peaks, quote=F, file = str_c(results_directory, "/defect_peaks_", Sys.Date(), ".bed"),
sep = "\t", row.names=F, col.names=F)
similar_peaks = granges_to_bed(peaks@rowRanges[similar_KI,])
similar_peaks
write.table(similar_peaks, quote=F, file = str_c(results_directory, "/similar_peaks_", Sys.Date(), ".bed"),
sep = "\t", row.names=F, col.names=F)
other_peaks = granges_to_bed(peaks@rowRanges[!similar_KI&!different_KI,])
other_peaks
other_peaks = granges_to_bed(peaks@rowRanges[!similar_KI&!different_KI&dne_rows,])
other_peaks
write.table(other_peaks, quote=F, file = str_c(results_directory, "/other_peaks_", Sys.Date(), ".bed"),
sep = "\t", row.names=F, col.names=F)
background_peaks = granges_to_bed(peaks@rowRanges)
write.table(background_peaks, quote=F, file = str_c(results_directory, "/background_peaks_", Sys.Date(), ".bed"),
sep = "\t", row.names=F, col.names=F)
background_peaks
opt_par_exp = read_csv("../data/exp_data_mins.csv") %>%
mutate(model = as_factor(model)) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
library(tidyverse)
library(RColorBrewer)
opt_par_exp = read_csv("../data/exp_data_mins.csv") %>%
mutate(model = as_factor(model)) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
set_wd("~/IFN_paper/src/2-site-model")
setwd("~/IFN_paper/src/2-site-model")
opt_par_exp = read_csv("../data/exp_data_mins.csv") %>%
mutate(model = as_factor(model)) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_syn = read_csv("../data/syn_data_mins.csv")  %>%
mutate(model = as_factor(model)) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_all = bind_rows(opt_par_exp, opt_par_syn)
model_names = c(`3`="AND", `2`="NFkB", `1`="IRF", `4`="OR")
val_names = c(`logbestC`="log10(C) of best fit", `minRMSD` = "RMSD of best fit")
opt_par_exp
opt_par_exp$model
?as_factor
## Plot best C/corresponding RMSD for all models
opt_par_exp = read_csv("../data/exp_data_mins.csv") %>%
mutate(model = factor(model, levels=c(3,1,2,4))) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_exp
opt_par_exp$model
opt_par_syn = read_csv("../data/syn_data_mins.csv")  %>%
mutate(model = factor(model, levels=c(3,1,2,4))) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_all = bind_rows(opt_par_exp, opt_par_syn)
model_names = c(`3`="AND", `2`="NFkB", `1`="IRF", `4`="OR")
val_names = c(`logbestC`="log10(C) of best fit", `minRMSD` = "RMSD of best fit")
p=ggplot(opt_par_syn, aes(x=model, y=val)) +
geom_point(alpha=0.5) +
geom_boxplot(data= opt_par_all, alpha=0.5) +
geom_point(data=opt_par_exp, color="red") +
facet_wrap(~measure, nrow=2, scales="free_y", labeller = as_labeller(val_names)) +
theme_bw()  +
scale_x_discrete(labels=model_names) +
expand_limits(y = 0) +
expand_limits(y = 1) +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
ggsave(p, filename = str_c("../2-site-model/figs/best_fits.png"),
height = 6, width = 9)
p=ggplot(opt_par_syn, aes(x=model, y=val)) +
geom_point(alpha=0.5) +
geom_boxplot(data= opt_par_all, alpha=0.5) +
geom_point(data=opt_par_exp, color="red") +
facet_wrap(~measure, nrow=2, scales="free_y", labeller = as_labeller(val_names)) +
theme_bw()  +
# scale_x_discrete(labels=model_names) +
expand_limits(y = 0) +
expand_limits(y = 1) +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
p
## Plot best C/corresponding RMSD for all models
opt_par_exp = read_csv("../data/exp_data_mins.csv") %>%
mutate(model = factor(model, levels=c("AND","IRF","NFkB","OR"))) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_syn = read_csv("../data/syn_data_mins.csv")  %>%
mutate(model = factor(model, levels=c("AND","IRF","NFkB","OR"))) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_all = bind_rows(opt_par_exp, opt_par_syn)
# model_names = c(`3`="AND", `2`="NFkB", `1`="IRF", `4`="OR")
val_names = c(`logbestC`="log10(C) of best fit", `minRMSD` = "RMSD of best fit")
p=ggplot(opt_par_syn, aes(x=model, y=val)) +
geom_point(alpha=0.5) +
geom_boxplot(data= opt_par_all, alpha=0.5) +
geom_point(data=opt_par_exp, color="red") +
facet_wrap(~measure, nrow=2, scales="free_y", labeller = as_labeller(val_names)) +
theme_bw()  +
# scale_x_discrete(labels=model_names) +
expand_limits(y = 0) +
expand_limits(y = 1) +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
p
ggsave(p, filename = str_c("../2-site-model/figs/best_fits.png"),
height = 6, width = 9)
## Plot best C/corresponding RMSD for all models
opt_par_exp = read_csv("../data/exp_data_mins.csv") %>%
mutate(model = factor(model, levels=c("IRF","NFkB","AND","OR"))) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
opt_par_syn = read_csv("../data/syn_data_mins.csv")  %>%
mutate(model = factor(model, levels=c("IRF","NFkB","AND","OR"))) %>%
mutate(group = row_number(), bestC=log10(bestC)) %>%
rename(logbestC=bestC) %>%
pivot_longer(c(minRMSD, logbestC), values_to = "val", names_to = "measure")
p=ggplot(opt_par_syn, aes(x=model, y=val)) +
geom_point(alpha=0.5) +
geom_boxplot(data= opt_par_all, alpha=0.5) +
geom_point(data=opt_par_exp, color="red") +
facet_wrap(~measure, nrow=2, scales="free_y", labeller = as_labeller(val_names)) +
theme_bw()  +
# scale_x_discrete(labels=model_names) +
expand_limits(y = 0) +
expand_limits(y = 1) +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
ggsave(p, filename = str_c("../2-site-model/figs/best_fits.png"),
height = 6, width = 9)
